// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai.proto

#ifndef PROTOBUF_INCLUDED_ai_2eproto
#define PROTOBUF_INCLUDED_ai_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ai_2eproto 

namespace protobuf_ai_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ai_2eproto
namespace rpc {
class CheckReply;
class CheckReplyDefaultTypeInternal;
extern CheckReplyDefaultTypeInternal _CheckReply_default_instance_;
class EmployeeInfo;
class EmployeeInfoDefaultTypeInternal;
extern EmployeeInfoDefaultTypeInternal _EmployeeInfo_default_instance_;
class EmployeesParam;
class EmployeesParamDefaultTypeInternal;
extern EmployeesParamDefaultTypeInternal _EmployeesParam_default_instance_;
class ImportReply;
class ImportReplyDefaultTypeInternal;
extern ImportReplyDefaultTypeInternal _ImportReply_default_instance_;
class PictureDataParam;
class PictureDataParamDefaultTypeInternal;
extern PictureDataParamDefaultTypeInternal _PictureDataParam_default_instance_;
class RegParam;
class RegParamDefaultTypeInternal;
extern RegParamDefaultTypeInternal _RegParam_default_instance_;
class RegReply;
class RegReplyDefaultTypeInternal;
extern RegReplyDefaultTypeInternal _RegReply_default_instance_;
}  // namespace rpc
namespace google {
namespace protobuf {
template<> ::rpc::CheckReply* Arena::CreateMaybeMessage<::rpc::CheckReply>(Arena*);
template<> ::rpc::EmployeeInfo* Arena::CreateMaybeMessage<::rpc::EmployeeInfo>(Arena*);
template<> ::rpc::EmployeesParam* Arena::CreateMaybeMessage<::rpc::EmployeesParam>(Arena*);
template<> ::rpc::ImportReply* Arena::CreateMaybeMessage<::rpc::ImportReply>(Arena*);
template<> ::rpc::PictureDataParam* Arena::CreateMaybeMessage<::rpc::PictureDataParam>(Arena*);
template<> ::rpc::RegParam* Arena::CreateMaybeMessage<::rpc::RegParam>(Arena*);
template<> ::rpc::RegReply* Arena::CreateMaybeMessage<::rpc::RegReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rpc {

// ===================================================================

class RegParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RegParam) */ {
 public:
  RegParam();
  virtual ~RegParam();

  RegParam(const RegParam& from);

  inline RegParam& operator=(const RegParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegParam(RegParam&& from) noexcept
    : RegParam() {
    *this = ::std::move(from);
  }

  inline RegParam& operator=(RegParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegParam* internal_default_instance() {
    return reinterpret_cast<const RegParam*>(
               &_RegParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RegParam* other);
  friend void swap(RegParam& a, RegParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegParam* New() const final {
    return CreateMaybeMessage<RegParam>(NULL);
  }

  RegParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegParam& from);
  void MergeFrom(const RegParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string login_name = 2;
  void clear_login_name();
  static const int kLoginNameFieldNumber = 2;
  const ::std::string& login_name() const;
  void set_login_name(const ::std::string& value);
  #if LANG_CXX11
  void set_login_name(::std::string&& value);
  #endif
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  ::std::string* mutable_login_name();
  ::std::string* release_login_name();
  void set_allocated_login_name(::std::string* login_name);

  // string employee_id = 3;
  void clear_employee_id();
  static const int kEmployeeIdFieldNumber = 3;
  const ::std::string& employee_id() const;
  void set_employee_id(const ::std::string& value);
  #if LANG_CXX11
  void set_employee_id(::std::string&& value);
  #endif
  void set_employee_id(const char* value);
  void set_employee_id(const char* value, size_t size);
  ::std::string* mutable_employee_id();
  ::std::string* release_employee_id();
  void set_allocated_employee_id(::std::string* employee_id);

  // .rpc.PictureDataParam photo = 5;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 5;
  private:
  const ::rpc::PictureDataParam& _internal_photo() const;
  public:
  const ::rpc::PictureDataParam& photo() const;
  ::rpc::PictureDataParam* release_photo();
  ::rpc::PictureDataParam* mutable_photo();
  void set_allocated_photo(::rpc::PictureDataParam* photo);

  // uint64 user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.RegParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr login_name_;
  ::google::protobuf::internal::ArenaStringPtr employee_id_;
  ::rpc::PictureDataParam* photo_;
  ::google::protobuf::uint64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RegReply) */ {
 public:
  RegReply();
  virtual ~RegReply();

  RegReply(const RegReply& from);

  inline RegReply& operator=(const RegReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegReply(RegReply&& from) noexcept
    : RegReply() {
    *this = ::std::move(from);
  }

  inline RegReply& operator=(RegReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegReply* internal_default_instance() {
    return reinterpret_cast<const RegReply*>(
               &_RegReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegReply* other);
  friend void swap(RegReply& a, RegReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegReply* New() const final {
    return CreateMaybeMessage<RegReply>(NULL);
  }

  RegReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegReply& from);
  void MergeFrom(const RegReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:rpc.RegReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmployeeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.EmployeeInfo) */ {
 public:
  EmployeeInfo();
  virtual ~EmployeeInfo();

  EmployeeInfo(const EmployeeInfo& from);

  inline EmployeeInfo& operator=(const EmployeeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmployeeInfo(EmployeeInfo&& from) noexcept
    : EmployeeInfo() {
    *this = ::std::move(from);
  }

  inline EmployeeInfo& operator=(EmployeeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmployeeInfo* internal_default_instance() {
    return reinterpret_cast<const EmployeeInfo*>(
               &_EmployeeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EmployeeInfo* other);
  friend void swap(EmployeeInfo& a, EmployeeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmployeeInfo* New() const final {
    return CreateMaybeMessage<EmployeeInfo>(NULL);
  }

  EmployeeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmployeeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmployeeInfo& from);
  void MergeFrom(const EmployeeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmployeeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.PictureDataParam photos = 5;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 5;
  ::rpc::PictureDataParam* mutable_photos(int index);
  ::google::protobuf::RepeatedPtrField< ::rpc::PictureDataParam >*
      mutable_photos();
  const ::rpc::PictureDataParam& photos(int index) const;
  ::rpc::PictureDataParam* add_photos();
  const ::google::protobuf::RepeatedPtrField< ::rpc::PictureDataParam >&
      photos() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string login_name = 2;
  void clear_login_name();
  static const int kLoginNameFieldNumber = 2;
  const ::std::string& login_name() const;
  void set_login_name(const ::std::string& value);
  #if LANG_CXX11
  void set_login_name(::std::string&& value);
  #endif
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  ::std::string* mutable_login_name();
  ::std::string* release_login_name();
  void set_allocated_login_name(::std::string* login_name);

  // string employee_id = 3;
  void clear_employee_id();
  static const int kEmployeeIdFieldNumber = 3;
  const ::std::string& employee_id() const;
  void set_employee_id(const ::std::string& value);
  #if LANG_CXX11
  void set_employee_id(::std::string&& value);
  #endif
  void set_employee_id(const char* value);
  void set_employee_id(const char* value, size_t size);
  ::std::string* mutable_employee_id();
  ::std::string* release_employee_id();
  void set_allocated_employee_id(::std::string* employee_id);

  // uint64 user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.EmployeeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rpc::PictureDataParam > photos_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr login_name_;
  ::google::protobuf::internal::ArenaStringPtr employee_id_;
  ::google::protobuf::uint64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmployeesParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.EmployeesParam) */ {
 public:
  EmployeesParam();
  virtual ~EmployeesParam();

  EmployeesParam(const EmployeesParam& from);

  inline EmployeesParam& operator=(const EmployeesParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmployeesParam(EmployeesParam&& from) noexcept
    : EmployeesParam() {
    *this = ::std::move(from);
  }

  inline EmployeesParam& operator=(EmployeesParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeesParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmployeesParam* internal_default_instance() {
    return reinterpret_cast<const EmployeesParam*>(
               &_EmployeesParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EmployeesParam* other);
  friend void swap(EmployeesParam& a, EmployeesParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmployeesParam* New() const final {
    return CreateMaybeMessage<EmployeesParam>(NULL);
  }

  EmployeesParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmployeesParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmployeesParam& from);
  void MergeFrom(const EmployeesParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmployeesParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.EmployeeInfo employees = 1;
  int employees_size() const;
  void clear_employees();
  static const int kEmployeesFieldNumber = 1;
  ::rpc::EmployeeInfo* mutable_employees(int index);
  ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >*
      mutable_employees();
  const ::rpc::EmployeeInfo& employees(int index) const;
  ::rpc::EmployeeInfo* add_employees();
  const ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >&
      employees() const;

  // @@protoc_insertion_point(class_scope:rpc.EmployeesParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo > employees_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.ImportReply) */ {
 public:
  ImportReply();
  virtual ~ImportReply();

  ImportReply(const ImportReply& from);

  inline ImportReply& operator=(const ImportReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportReply(ImportReply&& from) noexcept
    : ImportReply() {
    *this = ::std::move(from);
  }

  inline ImportReply& operator=(ImportReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportReply* internal_default_instance() {
    return reinterpret_cast<const ImportReply*>(
               &_ImportReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ImportReply* other);
  friend void swap(ImportReply& a, ImportReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportReply* New() const final {
    return CreateMaybeMessage<ImportReply>(NULL);
  }

  ImportReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImportReply& from);
  void MergeFrom(const ImportReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.EmployeeInfo employees = 2;
  int employees_size() const;
  void clear_employees();
  static const int kEmployeesFieldNumber = 2;
  ::rpc::EmployeeInfo* mutable_employees(int index);
  ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >*
      mutable_employees();
  const ::rpc::EmployeeInfo& employees(int index) const;
  ::rpc::EmployeeInfo* add_employees();
  const ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >&
      employees() const;

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:rpc.ImportReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo > employees_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PictureDataParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.PictureDataParam) */ {
 public:
  PictureDataParam();
  virtual ~PictureDataParam();

  PictureDataParam(const PictureDataParam& from);

  inline PictureDataParam& operator=(const PictureDataParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PictureDataParam(PictureDataParam&& from) noexcept
    : PictureDataParam() {
    *this = ::std::move(from);
  }

  inline PictureDataParam& operator=(PictureDataParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PictureDataParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDataParam* internal_default_instance() {
    return reinterpret_cast<const PictureDataParam*>(
               &_PictureDataParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PictureDataParam* other);
  friend void swap(PictureDataParam& a, PictureDataParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PictureDataParam* New() const final {
    return CreateMaybeMessage<PictureDataParam>(NULL);
  }

  PictureDataParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PictureDataParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PictureDataParam& from);
  void MergeFrom(const PictureDataParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDataParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes photo_datas = 4;
  void clear_photo_datas();
  static const int kPhotoDatasFieldNumber = 4;
  const ::std::string& photo_datas() const;
  void set_photo_datas(const ::std::string& value);
  #if LANG_CXX11
  void set_photo_datas(::std::string&& value);
  #endif
  void set_photo_datas(const char* value);
  void set_photo_datas(const void* value, size_t size);
  ::std::string* mutable_photo_datas();
  ::std::string* release_photo_datas();
  void set_allocated_photo_datas(::std::string* photo_datas);

  // string photo_url = 5;
  void clear_photo_url();
  static const int kPhotoUrlFieldNumber = 5;
  const ::std::string& photo_url() const;
  void set_photo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_photo_url(::std::string&& value);
  #endif
  void set_photo_url(const char* value);
  void set_photo_url(const char* value, size_t size);
  ::std::string* mutable_photo_url();
  ::std::string* release_photo_url();
  void set_allocated_photo_url(::std::string* photo_url);

  // uint32 photo_width = 1;
  void clear_photo_width();
  static const int kPhotoWidthFieldNumber = 1;
  ::google::protobuf::uint32 photo_width() const;
  void set_photo_width(::google::protobuf::uint32 value);

  // uint32 photo_height = 2;
  void clear_photo_height();
  static const int kPhotoHeightFieldNumber = 2;
  ::google::protobuf::uint32 photo_height() const;
  void set_photo_height(::google::protobuf::uint32 value);

  // uint32 format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::google::protobuf::uint32 format() const;
  void set_format(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.PictureDataParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr photo_datas_;
  ::google::protobuf::internal::ArenaStringPtr photo_url_;
  ::google::protobuf::uint32 photo_width_;
  ::google::protobuf::uint32 photo_height_;
  ::google::protobuf::uint32 format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.CheckReply) */ {
 public:
  CheckReply();
  virtual ~CheckReply();

  CheckReply(const CheckReply& from);

  inline CheckReply& operator=(const CheckReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckReply(CheckReply&& from) noexcept
    : CheckReply() {
    *this = ::std::move(from);
  }

  inline CheckReply& operator=(CheckReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckReply* internal_default_instance() {
    return reinterpret_cast<const CheckReply*>(
               &_CheckReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CheckReply* other);
  friend void swap(CheckReply& a, CheckReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckReply* New() const final {
    return CreateMaybeMessage<CheckReply>(NULL);
  }

  CheckReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckReply& from);
  void MergeFrom(const CheckReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_face = 1;
  void clear_is_face();
  static const int kIsFaceFieldNumber = 1;
  bool is_face() const;
  void set_is_face(bool value);

  // @@protoc_insertion_point(class_scope:rpc.CheckReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_face_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ai_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegParam

// string name = 1;
inline void RegParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegParam::name() const {
  // @@protoc_insertion_point(field_get:rpc.RegParam.name)
  return name_.GetNoArena();
}
inline void RegParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RegParam.name)
}
#if LANG_CXX11
inline void RegParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RegParam.name)
}
#endif
inline void RegParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RegParam.name)
}
inline void RegParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RegParam.name)
}
inline ::std::string* RegParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RegParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegParam::release_name() {
  // @@protoc_insertion_point(field_release:rpc.RegParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpc.RegParam.name)
}

// string login_name = 2;
inline void RegParam::clear_login_name() {
  login_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegParam::login_name() const {
  // @@protoc_insertion_point(field_get:rpc.RegParam.login_name)
  return login_name_.GetNoArena();
}
inline void RegParam::set_login_name(const ::std::string& value) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RegParam.login_name)
}
#if LANG_CXX11
inline void RegParam::set_login_name(::std::string&& value) {
  
  login_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RegParam.login_name)
}
#endif
inline void RegParam::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RegParam.login_name)
}
inline void RegParam::set_login_name(const char* value, size_t size) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RegParam.login_name)
}
inline ::std::string* RegParam::mutable_login_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RegParam.login_name)
  return login_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegParam::release_login_name() {
  // @@protoc_insertion_point(field_release:rpc.RegParam.login_name)
  
  return login_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegParam::set_allocated_login_name(::std::string* login_name) {
  if (login_name != NULL) {
    
  } else {
    
  }
  login_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_name);
  // @@protoc_insertion_point(field_set_allocated:rpc.RegParam.login_name)
}

// string employee_id = 3;
inline void RegParam::clear_employee_id() {
  employee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegParam::employee_id() const {
  // @@protoc_insertion_point(field_get:rpc.RegParam.employee_id)
  return employee_id_.GetNoArena();
}
inline void RegParam::set_employee_id(const ::std::string& value) {
  
  employee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RegParam.employee_id)
}
#if LANG_CXX11
inline void RegParam::set_employee_id(::std::string&& value) {
  
  employee_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RegParam.employee_id)
}
#endif
inline void RegParam::set_employee_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  employee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RegParam.employee_id)
}
inline void RegParam::set_employee_id(const char* value, size_t size) {
  
  employee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RegParam.employee_id)
}
inline ::std::string* RegParam::mutable_employee_id() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RegParam.employee_id)
  return employee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegParam::release_employee_id() {
  // @@protoc_insertion_point(field_release:rpc.RegParam.employee_id)
  
  return employee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegParam::set_allocated_employee_id(::std::string* employee_id) {
  if (employee_id != NULL) {
    
  } else {
    
  }
  employee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), employee_id);
  // @@protoc_insertion_point(field_set_allocated:rpc.RegParam.employee_id)
}

// uint64 user_id = 4;
inline void RegParam::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegParam::user_id() const {
  // @@protoc_insertion_point(field_get:rpc.RegParam.user_id)
  return user_id_;
}
inline void RegParam::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:rpc.RegParam.user_id)
}

// .rpc.PictureDataParam photo = 5;
inline bool RegParam::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
inline void RegParam::clear_photo() {
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) {
    delete photo_;
  }
  photo_ = NULL;
}
inline const ::rpc::PictureDataParam& RegParam::_internal_photo() const {
  return *photo_;
}
inline const ::rpc::PictureDataParam& RegParam::photo() const {
  const ::rpc::PictureDataParam* p = photo_;
  // @@protoc_insertion_point(field_get:rpc.RegParam.photo)
  return p != NULL ? *p : *reinterpret_cast<const ::rpc::PictureDataParam*>(
      &::rpc::_PictureDataParam_default_instance_);
}
inline ::rpc::PictureDataParam* RegParam::release_photo() {
  // @@protoc_insertion_point(field_release:rpc.RegParam.photo)
  
  ::rpc::PictureDataParam* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline ::rpc::PictureDataParam* RegParam::mutable_photo() {
  
  if (photo_ == NULL) {
    auto* p = CreateMaybeMessage<::rpc::PictureDataParam>(GetArenaNoVirtual());
    photo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rpc.RegParam.photo)
  return photo_;
}
inline void RegParam::set_allocated_photo(::rpc::PictureDataParam* photo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete photo_;
  }
  if (photo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      photo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo, submessage_arena);
    }
    
  } else {
    
  }
  photo_ = photo;
  // @@protoc_insertion_point(field_set_allocated:rpc.RegParam.photo)
}

// -------------------------------------------------------------------

// RegReply

// bool is_success = 1;
inline void RegReply::clear_is_success() {
  is_success_ = false;
}
inline bool RegReply::is_success() const {
  // @@protoc_insertion_point(field_get:rpc.RegReply.is_success)
  return is_success_;
}
inline void RegReply::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:rpc.RegReply.is_success)
}

// -------------------------------------------------------------------

// EmployeeInfo

// string name = 1;
inline void EmployeeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmployeeInfo::name() const {
  // @@protoc_insertion_point(field_get:rpc.EmployeeInfo.name)
  return name_.GetNoArena();
}
inline void EmployeeInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.EmployeeInfo.name)
}
#if LANG_CXX11
inline void EmployeeInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.EmployeeInfo.name)
}
#endif
inline void EmployeeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.EmployeeInfo.name)
}
inline void EmployeeInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.EmployeeInfo.name)
}
inline ::std::string* EmployeeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc.EmployeeInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmployeeInfo::release_name() {
  // @@protoc_insertion_point(field_release:rpc.EmployeeInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmployeeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpc.EmployeeInfo.name)
}

// string login_name = 2;
inline void EmployeeInfo::clear_login_name() {
  login_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmployeeInfo::login_name() const {
  // @@protoc_insertion_point(field_get:rpc.EmployeeInfo.login_name)
  return login_name_.GetNoArena();
}
inline void EmployeeInfo::set_login_name(const ::std::string& value) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.EmployeeInfo.login_name)
}
#if LANG_CXX11
inline void EmployeeInfo::set_login_name(::std::string&& value) {
  
  login_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.EmployeeInfo.login_name)
}
#endif
inline void EmployeeInfo::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.EmployeeInfo.login_name)
}
inline void EmployeeInfo::set_login_name(const char* value, size_t size) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.EmployeeInfo.login_name)
}
inline ::std::string* EmployeeInfo::mutable_login_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc.EmployeeInfo.login_name)
  return login_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmployeeInfo::release_login_name() {
  // @@protoc_insertion_point(field_release:rpc.EmployeeInfo.login_name)
  
  return login_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmployeeInfo::set_allocated_login_name(::std::string* login_name) {
  if (login_name != NULL) {
    
  } else {
    
  }
  login_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_name);
  // @@protoc_insertion_point(field_set_allocated:rpc.EmployeeInfo.login_name)
}

// string employee_id = 3;
inline void EmployeeInfo::clear_employee_id() {
  employee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmployeeInfo::employee_id() const {
  // @@protoc_insertion_point(field_get:rpc.EmployeeInfo.employee_id)
  return employee_id_.GetNoArena();
}
inline void EmployeeInfo::set_employee_id(const ::std::string& value) {
  
  employee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.EmployeeInfo.employee_id)
}
#if LANG_CXX11
inline void EmployeeInfo::set_employee_id(::std::string&& value) {
  
  employee_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.EmployeeInfo.employee_id)
}
#endif
inline void EmployeeInfo::set_employee_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  employee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.EmployeeInfo.employee_id)
}
inline void EmployeeInfo::set_employee_id(const char* value, size_t size) {
  
  employee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.EmployeeInfo.employee_id)
}
inline ::std::string* EmployeeInfo::mutable_employee_id() {
  
  // @@protoc_insertion_point(field_mutable:rpc.EmployeeInfo.employee_id)
  return employee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmployeeInfo::release_employee_id() {
  // @@protoc_insertion_point(field_release:rpc.EmployeeInfo.employee_id)
  
  return employee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmployeeInfo::set_allocated_employee_id(::std::string* employee_id) {
  if (employee_id != NULL) {
    
  } else {
    
  }
  employee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), employee_id);
  // @@protoc_insertion_point(field_set_allocated:rpc.EmployeeInfo.employee_id)
}

// uint64 user_id = 4;
inline void EmployeeInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EmployeeInfo::user_id() const {
  // @@protoc_insertion_point(field_get:rpc.EmployeeInfo.user_id)
  return user_id_;
}
inline void EmployeeInfo::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:rpc.EmployeeInfo.user_id)
}

// repeated .rpc.PictureDataParam photos = 5;
inline int EmployeeInfo::photos_size() const {
  return photos_.size();
}
inline void EmployeeInfo::clear_photos() {
  photos_.Clear();
}
inline ::rpc::PictureDataParam* EmployeeInfo::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.EmployeeInfo.photos)
  return photos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::PictureDataParam >*
EmployeeInfo::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:rpc.EmployeeInfo.photos)
  return &photos_;
}
inline const ::rpc::PictureDataParam& EmployeeInfo::photos(int index) const {
  // @@protoc_insertion_point(field_get:rpc.EmployeeInfo.photos)
  return photos_.Get(index);
}
inline ::rpc::PictureDataParam* EmployeeInfo::add_photos() {
  // @@protoc_insertion_point(field_add:rpc.EmployeeInfo.photos)
  return photos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::PictureDataParam >&
EmployeeInfo::photos() const {
  // @@protoc_insertion_point(field_list:rpc.EmployeeInfo.photos)
  return photos_;
}

// -------------------------------------------------------------------

// EmployeesParam

// repeated .rpc.EmployeeInfo employees = 1;
inline int EmployeesParam::employees_size() const {
  return employees_.size();
}
inline void EmployeesParam::clear_employees() {
  employees_.Clear();
}
inline ::rpc::EmployeeInfo* EmployeesParam::mutable_employees(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.EmployeesParam.employees)
  return employees_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >*
EmployeesParam::mutable_employees() {
  // @@protoc_insertion_point(field_mutable_list:rpc.EmployeesParam.employees)
  return &employees_;
}
inline const ::rpc::EmployeeInfo& EmployeesParam::employees(int index) const {
  // @@protoc_insertion_point(field_get:rpc.EmployeesParam.employees)
  return employees_.Get(index);
}
inline ::rpc::EmployeeInfo* EmployeesParam::add_employees() {
  // @@protoc_insertion_point(field_add:rpc.EmployeesParam.employees)
  return employees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >&
EmployeesParam::employees() const {
  // @@protoc_insertion_point(field_list:rpc.EmployeesParam.employees)
  return employees_;
}

// -------------------------------------------------------------------

// ImportReply

// bool is_success = 1;
inline void ImportReply::clear_is_success() {
  is_success_ = false;
}
inline bool ImportReply::is_success() const {
  // @@protoc_insertion_point(field_get:rpc.ImportReply.is_success)
  return is_success_;
}
inline void ImportReply::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:rpc.ImportReply.is_success)
}

// repeated .rpc.EmployeeInfo employees = 2;
inline int ImportReply::employees_size() const {
  return employees_.size();
}
inline void ImportReply::clear_employees() {
  employees_.Clear();
}
inline ::rpc::EmployeeInfo* ImportReply::mutable_employees(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.ImportReply.employees)
  return employees_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >*
ImportReply::mutable_employees() {
  // @@protoc_insertion_point(field_mutable_list:rpc.ImportReply.employees)
  return &employees_;
}
inline const ::rpc::EmployeeInfo& ImportReply::employees(int index) const {
  // @@protoc_insertion_point(field_get:rpc.ImportReply.employees)
  return employees_.Get(index);
}
inline ::rpc::EmployeeInfo* ImportReply::add_employees() {
  // @@protoc_insertion_point(field_add:rpc.ImportReply.employees)
  return employees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::EmployeeInfo >&
ImportReply::employees() const {
  // @@protoc_insertion_point(field_list:rpc.ImportReply.employees)
  return employees_;
}

// -------------------------------------------------------------------

// PictureDataParam

// uint32 photo_width = 1;
inline void PictureDataParam::clear_photo_width() {
  photo_width_ = 0u;
}
inline ::google::protobuf::uint32 PictureDataParam::photo_width() const {
  // @@protoc_insertion_point(field_get:rpc.PictureDataParam.photo_width)
  return photo_width_;
}
inline void PictureDataParam::set_photo_width(::google::protobuf::uint32 value) {
  
  photo_width_ = value;
  // @@protoc_insertion_point(field_set:rpc.PictureDataParam.photo_width)
}

// uint32 photo_height = 2;
inline void PictureDataParam::clear_photo_height() {
  photo_height_ = 0u;
}
inline ::google::protobuf::uint32 PictureDataParam::photo_height() const {
  // @@protoc_insertion_point(field_get:rpc.PictureDataParam.photo_height)
  return photo_height_;
}
inline void PictureDataParam::set_photo_height(::google::protobuf::uint32 value) {
  
  photo_height_ = value;
  // @@protoc_insertion_point(field_set:rpc.PictureDataParam.photo_height)
}

// uint32 format = 3;
inline void PictureDataParam::clear_format() {
  format_ = 0u;
}
inline ::google::protobuf::uint32 PictureDataParam::format() const {
  // @@protoc_insertion_point(field_get:rpc.PictureDataParam.format)
  return format_;
}
inline void PictureDataParam::set_format(::google::protobuf::uint32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:rpc.PictureDataParam.format)
}

// bytes photo_datas = 4;
inline void PictureDataParam::clear_photo_datas() {
  photo_datas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PictureDataParam::photo_datas() const {
  // @@protoc_insertion_point(field_get:rpc.PictureDataParam.photo_datas)
  return photo_datas_.GetNoArena();
}
inline void PictureDataParam::set_photo_datas(const ::std::string& value) {
  
  photo_datas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.PictureDataParam.photo_datas)
}
#if LANG_CXX11
inline void PictureDataParam::set_photo_datas(::std::string&& value) {
  
  photo_datas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.PictureDataParam.photo_datas)
}
#endif
inline void PictureDataParam::set_photo_datas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photo_datas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.PictureDataParam.photo_datas)
}
inline void PictureDataParam::set_photo_datas(const void* value, size_t size) {
  
  photo_datas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.PictureDataParam.photo_datas)
}
inline ::std::string* PictureDataParam::mutable_photo_datas() {
  
  // @@protoc_insertion_point(field_mutable:rpc.PictureDataParam.photo_datas)
  return photo_datas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PictureDataParam::release_photo_datas() {
  // @@protoc_insertion_point(field_release:rpc.PictureDataParam.photo_datas)
  
  return photo_datas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PictureDataParam::set_allocated_photo_datas(::std::string* photo_datas) {
  if (photo_datas != NULL) {
    
  } else {
    
  }
  photo_datas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_datas);
  // @@protoc_insertion_point(field_set_allocated:rpc.PictureDataParam.photo_datas)
}

// string photo_url = 5;
inline void PictureDataParam::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PictureDataParam::photo_url() const {
  // @@protoc_insertion_point(field_get:rpc.PictureDataParam.photo_url)
  return photo_url_.GetNoArena();
}
inline void PictureDataParam::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.PictureDataParam.photo_url)
}
#if LANG_CXX11
inline void PictureDataParam::set_photo_url(::std::string&& value) {
  
  photo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.PictureDataParam.photo_url)
}
#endif
inline void PictureDataParam::set_photo_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.PictureDataParam.photo_url)
}
inline void PictureDataParam::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.PictureDataParam.photo_url)
}
inline ::std::string* PictureDataParam::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:rpc.PictureDataParam.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PictureDataParam::release_photo_url() {
  // @@protoc_insertion_point(field_release:rpc.PictureDataParam.photo_url)
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PictureDataParam::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:rpc.PictureDataParam.photo_url)
}

// -------------------------------------------------------------------

// CheckReply

// bool is_face = 1;
inline void CheckReply::clear_is_face() {
  is_face_ = false;
}
inline bool CheckReply::is_face() const {
  // @@protoc_insertion_point(field_get:rpc.CheckReply.is_face)
  return is_face_;
}
inline void CheckReply::set_is_face(bool value) {
  
  is_face_ = value;
  // @@protoc_insertion_point(field_set:rpc.CheckReply.is_face)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ai_2eproto
