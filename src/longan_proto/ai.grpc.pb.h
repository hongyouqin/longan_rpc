// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai.proto
#ifndef GRPC_ai_2eproto__INCLUDED
#define GRPC_ai_2eproto__INCLUDED

#include "ai.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rpc {

class LonganRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.LonganRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 人脸检测接口
    virtual ::grpc::Status FaceCheck(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::rpc::CheckReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckReply>> AsyncFaceCheck(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckReply>>(AsyncFaceCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckReply>> PrepareAsyncFaceCheck(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckReply>>(PrepareAsyncFaceCheckRaw(context, request, cq));
    }
    // 人脸库信息初始化接口
    virtual ::grpc::Status FacesInfoBatchImports(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::rpc::ImportReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>> AsyncFacesInfoBatchImports(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>>(AsyncFacesInfoBatchImportsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>> PrepareAsyncFacesInfoBatchImports(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>>(PrepareAsyncFacesInfoBatchImportsRaw(context, request, cq));
    }
    // 人脸库信息更新接口
    virtual ::grpc::Status UpdateFacesInfo(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::rpc::ImportReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>> AsyncUpdateFacesInfo(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>>(AsyncUpdateFacesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>> PrepareAsyncUpdateFacesInfo(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>>(PrepareAsyncUpdateFacesInfoRaw(context, request, cq));
    }
    // 人脸注册接口
    virtual ::grpc::Status RegisterFace(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::rpc::RegReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegReply>> AsyncRegisterFace(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegReply>>(AsyncRegisterFaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegReply>> PrepareAsyncRegisterFace(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegReply>>(PrepareAsyncRegisterFaceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckReply>* AsyncFaceCheckRaw(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CheckReply>* PrepareAsyncFaceCheckRaw(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>* AsyncFacesInfoBatchImportsRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>* PrepareAsyncFacesInfoBatchImportsRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>* AsyncUpdateFacesInfoRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ImportReply>* PrepareAsyncUpdateFacesInfoRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegReply>* AsyncRegisterFaceRaw(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegReply>* PrepareAsyncRegisterFaceRaw(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FaceCheck(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::rpc::CheckReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckReply>> AsyncFaceCheck(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckReply>>(AsyncFaceCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckReply>> PrepareAsyncFaceCheck(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CheckReply>>(PrepareAsyncFaceCheckRaw(context, request, cq));
    }
    ::grpc::Status FacesInfoBatchImports(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::rpc::ImportReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>> AsyncFacesInfoBatchImports(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>>(AsyncFacesInfoBatchImportsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>> PrepareAsyncFacesInfoBatchImports(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>>(PrepareAsyncFacesInfoBatchImportsRaw(context, request, cq));
    }
    ::grpc::Status UpdateFacesInfo(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::rpc::ImportReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>> AsyncUpdateFacesInfo(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>>(AsyncUpdateFacesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>> PrepareAsyncUpdateFacesInfo(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>>(PrepareAsyncUpdateFacesInfoRaw(context, request, cq));
    }
    ::grpc::Status RegisterFace(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::rpc::RegReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegReply>> AsyncRegisterFace(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegReply>>(AsyncRegisterFaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegReply>> PrepareAsyncRegisterFace(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegReply>>(PrepareAsyncRegisterFaceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rpc::CheckReply>* AsyncFaceCheckRaw(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::CheckReply>* PrepareAsyncFaceCheckRaw(::grpc::ClientContext* context, const ::rpc::PictureDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>* AsyncFacesInfoBatchImportsRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>* PrepareAsyncFacesInfoBatchImportsRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>* AsyncUpdateFacesInfoRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ImportReply>* PrepareAsyncUpdateFacesInfoRaw(::grpc::ClientContext* context, const ::rpc::EmployeesParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::RegReply>* AsyncRegisterFaceRaw(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::RegReply>* PrepareAsyncRegisterFaceRaw(::grpc::ClientContext* context, const ::rpc::RegParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FaceCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_FacesInfoBatchImports_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFacesInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterFace_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 人脸检测接口
    virtual ::grpc::Status FaceCheck(::grpc::ServerContext* context, const ::rpc::PictureDataParam* request, ::rpc::CheckReply* response);
    // 人脸库信息初始化接口
    virtual ::grpc::Status FacesInfoBatchImports(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response);
    // 人脸库信息更新接口
    virtual ::grpc::Status UpdateFacesInfo(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response);
    // 人脸注册接口
    virtual ::grpc::Status RegisterFace(::grpc::ServerContext* context, const ::rpc::RegParam* request, ::rpc::RegReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FaceCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FaceCheck() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FaceCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceCheck(::grpc::ServerContext* context, const ::rpc::PictureDataParam* request, ::rpc::CheckReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceCheck(::grpc::ServerContext* context, ::rpc::PictureDataParam* request, ::grpc::ServerAsyncResponseWriter< ::rpc::CheckReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FacesInfoBatchImports : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FacesInfoBatchImports() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FacesInfoBatchImports() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacesInfoBatchImports(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFacesInfoBatchImports(::grpc::ServerContext* context, ::rpc::EmployeesParam* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ImportReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFacesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateFacesInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateFacesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFacesInfo(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFacesInfo(::grpc::ServerContext* context, ::rpc::EmployeesParam* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ImportReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterFace() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegisterFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterFace(::grpc::ServerContext* context, const ::rpc::RegParam* request, ::rpc::RegReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterFace(::grpc::ServerContext* context, ::rpc::RegParam* request, ::grpc::ServerAsyncResponseWriter< ::rpc::RegReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FaceCheck<WithAsyncMethod_FacesInfoBatchImports<WithAsyncMethod_UpdateFacesInfo<WithAsyncMethod_RegisterFace<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_FaceCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FaceCheck() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FaceCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceCheck(::grpc::ServerContext* context, const ::rpc::PictureDataParam* request, ::rpc::CheckReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FacesInfoBatchImports : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FacesInfoBatchImports() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FacesInfoBatchImports() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacesInfoBatchImports(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFacesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateFacesInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateFacesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFacesInfo(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterFace() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegisterFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterFace(::grpc::ServerContext* context, const ::rpc::RegParam* request, ::rpc::RegReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FaceCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FaceCheck() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FaceCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceCheck(::grpc::ServerContext* context, const ::rpc::PictureDataParam* request, ::rpc::CheckReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FacesInfoBatchImports : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FacesInfoBatchImports() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FacesInfoBatchImports() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacesInfoBatchImports(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFacesInfoBatchImports(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFacesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateFacesInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateFacesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFacesInfo(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFacesInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RegisterFace() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegisterFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterFace(::grpc::ServerContext* context, const ::rpc::RegParam* request, ::rpc::RegReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterFace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FaceCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FaceCheck() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::PictureDataParam, ::rpc::CheckReply>(std::bind(&WithStreamedUnaryMethod_FaceCheck<BaseClass>::StreamedFaceCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FaceCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FaceCheck(::grpc::ServerContext* context, const ::rpc::PictureDataParam* request, ::rpc::CheckReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFaceCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::PictureDataParam,::rpc::CheckReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FacesInfoBatchImports : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FacesInfoBatchImports() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::EmployeesParam, ::rpc::ImportReply>(std::bind(&WithStreamedUnaryMethod_FacesInfoBatchImports<BaseClass>::StreamedFacesInfoBatchImports, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FacesInfoBatchImports() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FacesInfoBatchImports(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFacesInfoBatchImports(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::EmployeesParam,::rpc::ImportReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFacesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateFacesInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::EmployeesParam, ::rpc::ImportReply>(std::bind(&WithStreamedUnaryMethod_UpdateFacesInfo<BaseClass>::StreamedUpdateFacesInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateFacesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFacesInfo(::grpc::ServerContext* context, const ::rpc::EmployeesParam* request, ::rpc::ImportReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFacesInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::EmployeesParam,::rpc::ImportReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterFace() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::rpc::RegParam, ::rpc::RegReply>(std::bind(&WithStreamedUnaryMethod_RegisterFace<BaseClass>::StreamedRegisterFace, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterFace(::grpc::ServerContext* context, const ::rpc::RegParam* request, ::rpc::RegReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterFace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::RegParam,::rpc::RegReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FaceCheck<WithStreamedUnaryMethod_FacesInfoBatchImports<WithStreamedUnaryMethod_UpdateFacesInfo<WithStreamedUnaryMethod_RegisterFace<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FaceCheck<WithStreamedUnaryMethod_FacesInfoBatchImports<WithStreamedUnaryMethod_UpdateFacesInfo<WithStreamedUnaryMethod_RegisterFace<Service > > > > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_ai_2eproto__INCLUDED
